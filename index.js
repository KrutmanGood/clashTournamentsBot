const { Telegraf, Markup, session } = require('telegraf')
const fs = require('fs')

const token = '5287833118:AAHGYwi8IyeitRag-tne1HWLS7YdmCTgXic'
const bot = new Telegraf(token)

bot.use(session())

const groupId = -1001731797871
const listMessageId = 373
const myId = 851424962
const myUsername = 'krutman_good'

const paymentButtons = [
    [
        Markup.button.callback('Qiwi', 'buttonQiwi'),
        Markup.button.callback('–ö–∞—Ä—Ç–∞', 'buttonCard'),
    ],
]

const proofOfPaymentQiwi = [
    [
        Markup.button.callback('üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', 'buttonQiwiText'),
    ]
]

const proofOfPaymentCard = [
    [
        Markup.button.callback('üí≥ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', 'buttonCardText'),
    ]
]

const linkToChannel = [
    [
        Markup.button.url('–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª', 'https://t.me/+laZq3atsMAo2NzZi'),
    ]
]

const repeat = [
    [
        Markup.button.callback('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', 'buttonRepeat'),
    ],
]

const cancelButton = [
    [
        Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ', `cancelAdminButton`),
    ],
]

bot.start(async ctx => {
        const messageInfo = ctx.update.message

        ctx.session = ctx.session || {}
        
        await ctx.replyWithSticker('CAACAgIAAxkBAAOuYstStLQt81g61gk0uPr8Abd9mZ8AAmsFAAI_lcwKnojHcHpOexMpBA')
        await ctx.reply(`*–ü—Ä–∏–≤–µ—Ç, ${messageInfo.from.first_name}!*\n\n–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ –æ—Ç –∫–∞–Ω–∞–ª–∞ @ClashFreeTours.\n\n–ò—Ç–∞–∫, –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:`, {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: paymentButtons, resize_keyboard: true, },
        })  
})

bot.action(/.+/, async ctx => {
    ctx.session = ctx.session || {}

    try {
        const callbackInfo = ctx.update.callback_query

        console.log(callbackInfo.message)
    
        if (callbackInfo.data == 'buttonQiwi') {
            ctx.session.startTime = getTime()

            await ctx.replyWithSticker('CAACAgIAAxkBAAO0YstUcP86oNZTmVNSRGJs2Xn3cD0AAkgDAAK1cdoG6qiC7oVZ2HYpBA')
            await ctx.reply(`*–û—Ç–ª–∏—á–Ω–æ! –î–µ–ª–æ –∑–∞ –º–∞–ª—ã–º:*\n\n[MFMIKO](https://qiwi.com/n/MFMIKO) ‚Äî –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ *QIWI –ö–æ—à–µ–ª–µ–∫*, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä.\n\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–µ–¥–µ—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—É–º–º—É –Ω–∞ –¥–∞–Ω–Ω—ã–π *QIWI –ö–æ—à–µ–ª–µ–∫*, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´*–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É*¬ª, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —É–±–µ–¥–∏—Ç—å—Å—è –≤ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã.\n\n–ï—Å–ª–∏ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤–∞–º –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç –≤—Ç–µ—á–µ–Ω–∏–µ 6 —á–∞—Å–æ–≤, –ø–∏—à–∏—Ç–µ [@${myUsername}](tg://user?id=${myId}).`, {
                reply_markup: { keyboard: proofOfPaymentQiwi, resize_keyboard: true, },
                parse_mode: 'Markdown',
            })

        } else if (callbackInfo.data == 'buttonCard') {
            ctx.session.startTime = getTime()

            await ctx.replyWithSticker('CAACAgIAAxkBAAO2YstUh6HkCk7edqdBPanOb_JMjnoAAnkAA-SgzgekUWrPo079hykE')
            await ctx.reply(`*–û—Ç–ª–∏—á–Ω–æ! –î–µ–ª–æ –∑–∞ –º–∞–ª—ã–º:*\n\n\`4693 9575 7491 8590\` ‚Äî —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ–≥–æ.\n\n–ò–º—è –¥–µ—Ä–∂–∞—Ç–µ–ª—è –∫–∞—Ä—Ç—ã:\n\`MIKHAIL KRUPEEV\`\n\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–µ–¥–µ—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—É–º–º—É –Ω–∞ –¥–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´*–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É*¬ª, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —É–±–µ–¥–∏—Ç—å—Å—è –≤ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã.\n\n–ï—Å–ª–∏ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤–∞–º –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç –≤—Ç–µ—á–µ–Ω–∏–µ 6 —á–∞—Å–æ–≤, –ø–∏—à–∏—Ç–µ [@${myUsername}](tg://user?id=${myId}).`, {
                reply_markup: { keyboard: proofOfPaymentCard, resize_keyboard: true, },
                parse_mode: 'Markdown',
            })

        } else {
            const cancelId = callbackInfo.data.split('/')
            const messageId = callbackInfo.message.message_id
            
            const adminId = callbackInfo.from.id
            const adminUsername = callbackInfo.from.username
    
            if (cancelId[0] == 'confirm') {
                const time = getTime()
                await ctx.telegram.sendSticker(cancelId[1], 'CAACAgIAAxkBAAIBq2LLbOVEQixjHmgNjSRCzYt4RgjRAALLAAP3AsgPoCR023uD5FopBA')
                await ctx.telegram.sendMessage(cancelId[1], `*–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!*\n\n–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –Ω–æ–≤–æ—Å—Ç–µ–π –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º —Ç—É—Ä–Ω–∏—Ä–µ\n\n–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: *MIKO SQUAD*`, {
                    parse_mode: 'Markdown',
                    reply_markup: { inline_keyboard: linkToChannel, resize_keyboard: true, },
                })
                await ctx.telegram.editMessageText(groupId, messageId, messageId, `*–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!*\n\n–ü—Ä–æ–≤–µ—Ä–∏–ª: [@${adminUsername}](tg://user?id=${adminId})\n–ó–∞—è–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –≤ ${time}.`, {
                    parse_mode: 'Markdown',
                })
    
                await fs.readFile('files/users.txt', { encoding: 'utf-8' }, async (err, data) => {
                    const newUser = `${cancelId[2]}:${cancelId[3]} `
                    const newData = data + newUser
            
                    await fs.writeFileSync('files/users.txt', newData)
    
                    const userArray = newData.split(' ')
                    userArray.pop()
    
                    await ctx.telegram.editMessageText(groupId, listMessageId, listMessageId, `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –≤ —Ç—É—Ä–Ω–∏—Ä: *${userArray.length}*üí∞`, {
                        parse_mode: 'Markdown',
                    })
                })
            }
            
            if (cancelId[0] == 'cancel') {
                const time = getTime()

                await ctx.telegram.sendSticker(cancelId[1], 'CAACAgIAAxkBAAICNWLLfBvC4xkZ5o2IocPxY1jsjxILAAIGCwACa4igS8COtjwg5GXSKQQ')
                await ctx.telegram.sendMessage(cancelId[1], `–û–ø–ª–∞—Ç—ã —Å–æ–≤–µ—Ä—à–µ–Ω–æ –Ω–µ –±—ã–ª–æ...\n\n–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫, –Ω–∞–ø–∏—à–∏—Ç–µ @Miko_FK`, {
                    reply_markup: { keyboard: repeat, resize_keyboard: true, },
                })
                await ctx.telegram.editMessageText(groupId, messageId, messageId, `*–û–ø–ª–∞—Ç–∞, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ—à–ª–∞ –Ω–µ —É—Å–ø–µ—à–Ω–æ... *\n\n–ü—Ä–æ–≤–µ—Ä–∏–ª: [@${adminUsername}](tg://user?id=${adminId})\n–ó–∞—è–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –≤ ${time}.`, {
                    parse_mode: 'Markdown',
                })
    
            }
        }
    } catch (e) {
        
        console.error('action error', e)

        
    }
})              

bot.command('admin', async ctx => {
    ctx.session = ctx.session || {}
    
    if (ctx.update.message.from.id == myId) {
        const adminsCommands = [
            [
                Markup.button.callback('üì´ –†–∞—Å—Å—ã–ª–∫–∞', `mailingListAdminButton`),
            ],
            [
                Markup.button.callback('üìà –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è', `ListAdminButton`),
            ],
            [
                Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ', `cancelAdminButton`),
            ],
        ]

        await ctx.telegram.sendMessage(myId, `–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–æ–º–∞–Ω–¥—É, –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:`,
            {
                parse_mode: 'Markdown',
                reply_markup: { keyboard: adminsCommands, resize_keyboard: true, }
            },
        )   
    }
})

bot.on('sticker', async ctx => console.log('–°—Ç–∏–∫–µ—Ä'))

bot.on('message', async ctx => {
    ctx.session = ctx.session || {}

    if (ctx.session.mailingList == undefined) {
        ctx.session.mailingList = false
    }  

    const messageInfo = ctx.update.message

    try {
        if (messageInfo.text == 'üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É' || messageInfo.text == 'üí≥ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É' || messageInfo.text == '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É') {
            if (messageInfo.text == 'üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É') {

                const adminsButtons = [
                    [
                        Markup.button.callback('‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞', `confirm/${messageInfo.chat.id}/${messageInfo.from.id}/${messageInfo.from.first_name}`),
                    ],
                    [
                        Markup.button.callback('‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞', `cancel/${messageInfo.chat.id}`),
                    ],
                ]
        
                await ctx.replyWithSticker('CAACAgIAAxkBAAPvYstc6fSk-uikYDL8u5IW_uCYpHwAAiAJAAIYQu4I4YogqKE6CtkpBA')
                await ctx.reply('–ù–∞—à –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞—à—É –æ–ø–ª–∞—Ç—É, –æ–∂–∏–¥–∞–π—Ç–µ...', {
                    parse_mode: 'Markdown',
                    reply_markup: { hide_keyboard: true }
                })
        
                const date = getDate()
                const startTime = ctx.session.startTime
                const finalTime = getTime()
        
                await ctx.telegram.sendMessage(groupId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [${messageInfo.chat.first_name}](tg://user?id=${messageInfo.chat.id}) –æ–∂–∏–¥–∞–µ—Ç, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –µ–≥–æ –æ–ø–ª–∞—Ç–∞.\n\n–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${startTime}-${finalTime}\n–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${date}\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: Qiwiüí∞`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: { inline_keyboard: adminsButtons, resize_keyboard: true, }
                },
                )
            }
        
            if (messageInfo.text == 'üí≥ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É') {
                
                const adminsButtons = [
                    [
                        Markup.button.callback('‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞', `confirm/${messageInfo.chat.id}/${messageInfo.from.id}/${messageInfo.from.first_name}`),
                    ],
                    [
                        Markup.button.callback('‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞', `cancel/${messageInfo.chat.id}`),
                    ],
                ]
        
                await ctx.replyWithSticker('CAACAgIAAxkBAAPvYstc6fSk-uikYDL8u5IW_uCYpHwAAiAJAAIYQu4I4YogqKE6CtkpBA')
                await ctx.reply('–ù–∞—à –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞—à—É –æ–ø–ª–∞—Ç—É, –æ–∂–∏–¥–∞–π—Ç–µ...', {
                    parse_mode: 'Markdown',
                    reply_markup: { hide_keyboard: true }
                })
        
                const date = getDate()
                const startTime = ctx.session.startTime
                const finalTime = getTime()
        
                await ctx.telegram.sendMessage(groupId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [${messageInfo.chat.first_name}](tg://user?id=${messageInfo.chat.id}) –æ–∂–∏–¥–∞–µ—Ç, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –µ–≥–æ –æ–ø–ª–∞—Ç–∞.\n\n–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${startTime}-${finalTime}\n–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${date}\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ö–∞—Ä—Ç–∞üí≥`,
                    {
                        parse_mode: 'Markdown',
                        reply_markup: { inline_keyboard: adminsButtons, resize_keyboard: true, }
                    },
                )
            }

            if (messageInfo.text == '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É') {
                await ctx.telegram.sendSticker(messageInfo.from.id, 'CAACAgIAAxkBAAIOJmLQNn4L7H6uwnq2bSYn-RaKRZW2AAJtAAPANk8TuYwoJWdISRspBA', {
                    reply_markup: { resize_keyboard: true, hide_keyboard: true }
                })
                await ctx.reply(`–ò—Ç–∞–∫, –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:`, {
                    parse_mode: 'Markdown',
                    reply_markup: { inline_keyboard: paymentButtons, resize_keyboard: true, },
                })
            }
        } else {
            if (messageInfo.text == 'üì´ –†–∞—Å—Å—ã–ª–∫–∞' && messageInfo.from.id == myId) {
                await ctx.telegram.sendMessage(myId, `–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å:`,
                    {
                        parse_mode: 'Markdown',
                        reply_markup: { keyboard: cancelButton, resize_keyboard: true, },
                    }
                )
                ctx.session.mailingList = true
            } else {
                if (messageInfo.from.id == myId && ctx.session.mailingList == true && messageInfo.text != '–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ') {
                    ctx.session.mailingList = false
                    ctx.session.commandText = messageInfo.text
    
                    await fs.readFile('files/users.txt', { encoding: 'utf-8' }, async (err, data) => {
                        const userArray = data.split(' ')
                        userArray.pop()
            
                        for (let i = 0; i < userArray.length; i++) {
                            const el = userArray[i]
                            const id = el.split(':') 

                            await ctx.telegram.sendMessage(id[0], ctx.session.commandText,
                                {
                                    parse_mode: 'Markdown',
                                },
                            )
                        }
                    })
                    await ctx.telegram.sendMessage(myId, 'disjdasid',
                        {
                            parse_mode: 'Markdown',
                        },
                    )
                }
            }
            if (messageInfo.text == 'üìà –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è' && messageInfo.from.id == myId) {
                await fs.readFile('files/users.txt', { encoding: 'utf-8' }, async (err, data) => {
                    const userArray = data.split(' ')
                    userArray.pop()
                    const resultArray = []
        
                    for (let i = 0; i < userArray.length; i++) {
                        const el = userArray[i]
                        const arrayEl = el.split(':')
                        const name = arrayEl[1]
                        const id = arrayEl[0]
                        const user = `[${name}](tg://user?id=${id})`
                        
                        resultArray.push(user)
                    }
                    const linkToUser = resultArray.join(', ')

                    await ctx.telegram.sendMessage(myId, `–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–∞–Ω–æ: ${linkToUser}`,
                        {
                            parse_mode: 'Markdown',
                            reply_markup: { hide_keyboard: true }
                        },
                    )     
                })
    
            }
            if (messageInfo.text == '–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ') {
                ctx.session.mailingList = false
                await ctx.telegram.sendMessage(myId, `–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ`,
                        {
                            parse_mode: 'Markdown',
                            reply_markup: { hide_keyboard: true }
                        },
                    )
            }
        }
    }
    catch (e) {
            console.error('message error', e)
    }
})

    
bot.launch()

function getDate() {
    const date = new Date()
    
    let day = date.getDate()

    if (day <= 9) {
        day = '0' + day
    }

    let month = date.getMonth() + 1

    if (month <= 9) {
        month = '0' + month
    }

    const year = date.getFullYear()
    
    return `${day}.${month}.${year}`
}

function getTime() {
    const date = new Date()
    
    let hour = date.getHours()

    if (hour <= 9) {
        hour = '0' + hour
    }

    let minute = date.getMinutes()

    if (minute <= 9) {
        minute = '0' + minute
    }

    return `${hour}:${minute}`
}